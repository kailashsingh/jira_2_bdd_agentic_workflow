{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nlet StudyControlsComponent = class StudyControlsComponent {\n  constructor(workflowService, snackBar) {\n    this.workflowService = workflowService;\n    this.snackBar = snackBar;\n    this.isGenerating = false;\n    this.currentRunId = null;\n    this.subscriptions = [];\n  }\n  ngOnDestroy() {\n    // Clean up polling interval\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n    }\n    // Unsubscribe from all subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n  generateFeatureFile() {\n    if (this.isGenerating) {\n      return;\n    }\n    this.isGenerating = true;\n    // You can customize this request based on your needs\n    const request = {\n      sprint_id: undefined,\n      jira_keys: undefined // You can add a form field to capture this\n    };\n    const subscription = this.workflowService.triggerWorkflow(request).subscribe({\n      next: response => {\n        this.currentRunId = response.run_id;\n        this.snackBar.open(`Workflow started successfully! Run ID: ${response.run_id}`, 'Close', {\n          duration: 5000\n        });\n        // Start polling for status updates\n        this.pollWorkflowStatus();\n      },\n      error: error => {\n        console.error('Error triggering workflow:', error);\n        this.snackBar.open('Error starting workflow. Please check the backend connection.', 'Close', {\n          duration: 5000\n        });\n        this.isGenerating = false;\n      }\n    });\n    this.subscriptions.push(subscription);\n  }\n  pollWorkflowStatus() {\n    if (!this.currentRunId) {\n      this.isGenerating = false;\n      return;\n    }\n    // Clear any existing polling interval\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n    }\n    this.pollInterval = setInterval(() => {\n      const subscription = this.workflowService.getWorkflowStatus(this.currentRunId).subscribe({\n        next: status => {\n          if (status.status === 'completed' || status.status === 'failed') {\n            clearInterval(this.pollInterval);\n            this.isGenerating = false;\n            if (status.status === 'completed') {\n              this.snackBar.open('Feature file generation completed successfully!', 'Close', {\n                duration: 5000\n              });\n            } else {\n              this.snackBar.open(`Workflow failed: ${status.error || 'Unknown error'}`, 'Close', {\n                duration: 5000\n              });\n            }\n          }\n        },\n        error: error => {\n          console.error('Error checking workflow status:', error);\n          clearInterval(this.pollInterval);\n          this.isGenerating = false;\n        }\n      });\n      this.subscriptions.push(subscription);\n    }, 2000); // Poll every 2 seconds\n  }\n};\nStudyControlsComponent = __decorate([Component({\n  selector: 'app-study-controls',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatFormFieldModule, MatInputModule, MatSelectModule, MatIconModule, MatProgressSpinnerModule, MatSnackBarModule],\n  template: `\n    <div class=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n      <div class=\"flex flex-1 gap-2 items-center\">\n        <mat-form-field class=\"flex-1 max-w-sm\" appearance=\"outline\">\n          <mat-icon matPrefix>search</mat-icon>\n          <input matInput placeholder=\"Search studies...\">\n        </mat-form-field>\n        \n        <mat-form-field class=\"w-130\" appearance=\"outline\">\n          <mat-label>Filter</mat-label>\n          <mat-select>\n            <mat-option value=\"all\">All Studies</mat-option>\n            <mat-option value=\"role-a\">Role A Only</mat-option>\n            <mat-option value=\"role-b\">Role B Only</mat-option>\n            <mat-option value=\"active\">Active Only</mat-option>\n            <mat-option value=\"validated\">Validated</mat-option>\n            <mat-option value=\"pending\">Pending</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      \n      <div class=\"flex gap-2\">\n        <button mat-stroked-button>\n          <mat-icon>refresh</mat-icon>\n          Refresh\n        </button>\n        <button mat-flat-button color=\"primary\" (click)=\"generateFeatureFile()\" [disabled]=\"isGenerating\">\n          <mat-icon *ngIf=\"!isGenerating\">auto_fix_high</mat-icon>\n          <mat-spinner *ngIf=\"isGenerating\" diameter=\"20\"></mat-spinner>\n          {{ isGenerating ? 'Generating...' : 'Generate Feature File' }}\n        </button>\n        <button mat-flat-button color=\"accent\">\n          <mat-icon>add</mat-icon>\n          New Study\n        </button>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .flex { display: flex; }\n    .flex-col { flex-direction: column; }\n    .flex-1 { flex: 1 1 0%; }\n    .gap-2 { gap: 0.5rem; }\n    .gap-4 { gap: 1rem; }\n    .items-center { align-items: center; }\n    .items-start { align-items: flex-start; }\n    .justify-between { justify-content: space-between; }\n    .max-w-sm { max-width: 24rem; }\n    .w-130 { width: 130px; }\n    mat-icon { margin-right: 0.5rem; }\n    \n    @media (min-width: 640px) {\n      .sm\\\\:flex-row { flex-direction: row; }\n      .sm\\\\:items-center { align-items: center; }\n    }\n  `]\n})], StudyControlsComponent);\nexport { StudyControlsComponent };","map":{"version":3,"names":["Component","CommonModule","MatButtonModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatIconModule","MatProgressSpinnerModule","MatSnackBarModule","StudyControlsComponent","constructor","workflowService","snackBar","isGenerating","currentRunId","subscriptions","ngOnDestroy","pollInterval","clearInterval","forEach","sub","unsubscribe","generateFeatureFile","request","sprint_id","undefined","jira_keys","subscription","triggerWorkflow","subscribe","next","response","run_id","open","duration","pollWorkflowStatus","error","console","push","setInterval","getWorkflowStatus","status","__decorate","selector","standalone","imports","template","styles"],"sources":["F:\\aaa\\jira_2_bdd_agentic_workflow\\angular\\src\\app\\components\\study-controls\\study-controls.component.ts"],"sourcesContent":["import { Component, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\r\nimport { WorkflowService, WorkflowRequest } from '../../services/workflow.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-study-controls',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatSnackBarModule\r\n  ],\r\n  template: `\r\n    <div class=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\r\n      <div class=\"flex flex-1 gap-2 items-center\">\r\n        <mat-form-field class=\"flex-1 max-w-sm\" appearance=\"outline\">\r\n          <mat-icon matPrefix>search</mat-icon>\r\n          <input matInput placeholder=\"Search studies...\">\r\n        </mat-form-field>\r\n        \r\n        <mat-form-field class=\"w-130\" appearance=\"outline\">\r\n          <mat-label>Filter</mat-label>\r\n          <mat-select>\r\n            <mat-option value=\"all\">All Studies</mat-option>\r\n            <mat-option value=\"role-a\">Role A Only</mat-option>\r\n            <mat-option value=\"role-b\">Role B Only</mat-option>\r\n            <mat-option value=\"active\">Active Only</mat-option>\r\n            <mat-option value=\"validated\">Validated</mat-option>\r\n            <mat-option value=\"pending\">Pending</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n      \r\n      <div class=\"flex gap-2\">\r\n        <button mat-stroked-button>\r\n          <mat-icon>refresh</mat-icon>\r\n          Refresh\r\n        </button>\r\n        <button mat-flat-button color=\"primary\" (click)=\"generateFeatureFile()\" [disabled]=\"isGenerating\">\r\n          <mat-icon *ngIf=\"!isGenerating\">auto_fix_high</mat-icon>\r\n          <mat-spinner *ngIf=\"isGenerating\" diameter=\"20\"></mat-spinner>\r\n          {{ isGenerating ? 'Generating...' : 'Generate Feature File' }}\r\n        </button>\r\n        <button mat-flat-button color=\"accent\">\r\n          <mat-icon>add</mat-icon>\r\n          New Study\r\n        </button>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .flex { display: flex; }\r\n    .flex-col { flex-direction: column; }\r\n    .flex-1 { flex: 1 1 0%; }\r\n    .gap-2 { gap: 0.5rem; }\r\n    .gap-4 { gap: 1rem; }\r\n    .items-center { align-items: center; }\r\n    .items-start { align-items: flex-start; }\r\n    .justify-between { justify-content: space-between; }\r\n    .max-w-sm { max-width: 24rem; }\r\n    .w-130 { width: 130px; }\r\n    mat-icon { margin-right: 0.5rem; }\r\n    \r\n    @media (min-width: 640px) {\r\n      .sm\\\\:flex-row { flex-direction: row; }\r\n      .sm\\\\:items-center { align-items: center; }\r\n    }\r\n  `]\r\n})\r\nexport class StudyControlsComponent implements OnDestroy {\r\n  isGenerating = false;\r\n  currentRunId: string | null = null;\r\n  private pollInterval: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private workflowService: WorkflowService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    // Clean up polling interval\r\n    if (this.pollInterval) {\r\n      clearInterval(this.pollInterval);\r\n    }\r\n    \r\n    // Unsubscribe from all subscriptions\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  generateFeatureFile(): void {\r\n    if (this.isGenerating) {\r\n      return;\r\n    }\r\n\r\n    this.isGenerating = true;\r\n    \r\n    // You can customize this request based on your needs\r\n    const request: WorkflowRequest = {\r\n      sprint_id: undefined, // You can add a form field to capture this\r\n      jira_keys: undefined  // You can add a form field to capture this\r\n    };\r\n\r\n    const subscription = this.workflowService.triggerWorkflow(request).subscribe({\r\n      next: (response) => {\r\n        this.currentRunId = response.run_id;\r\n        this.snackBar.open(\r\n          `Workflow started successfully! Run ID: ${response.run_id}`, \r\n          'Close', \r\n          { duration: 5000 }\r\n        );\r\n        \r\n        // Start polling for status updates\r\n        this.pollWorkflowStatus();\r\n      },\r\n      error: (error) => {\r\n        console.error('Error triggering workflow:', error);\r\n        this.snackBar.open(\r\n          'Error starting workflow. Please check the backend connection.', \r\n          'Close', \r\n          { duration: 5000 }\r\n        );\r\n        this.isGenerating = false;\r\n      }\r\n    });\r\n    \r\n    this.subscriptions.push(subscription);\r\n  }\r\n\r\n  private pollWorkflowStatus(): void {\r\n    if (!this.currentRunId) {\r\n      this.isGenerating = false;\r\n      return;\r\n    }\r\n\r\n    // Clear any existing polling interval\r\n    if (this.pollInterval) {\r\n      clearInterval(this.pollInterval);\r\n    }\r\n\r\n    this.pollInterval = setInterval(() => {\r\n      const subscription = this.workflowService.getWorkflowStatus(this.currentRunId!).subscribe({\r\n        next: (status) => {\r\n          if (status.status === 'completed' || status.status === 'failed') {\r\n            clearInterval(this.pollInterval);\r\n            this.isGenerating = false;\r\n            \r\n            if (status.status === 'completed') {\r\n              this.snackBar.open(\r\n                'Feature file generation completed successfully!', \r\n                'Close', \r\n                { duration: 5000 }\r\n              );\r\n            } else {\r\n              this.snackBar.open(\r\n                `Workflow failed: ${status.error || 'Unknown error'}`, \r\n                'Close', \r\n                { duration: 5000 }\r\n              );\r\n            }\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error checking workflow status:', error);\r\n          clearInterval(this.pollInterval);\r\n          this.isGenerating = false;\r\n        }\r\n      });\r\n      \r\n      this.subscriptions.push(subscription);\r\n    }, 2000); // Poll every 2 seconds\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}